#define NCCH_MAGIC 0x4E434348typedef enum{	NCCHTYPE_EXHEADER = 1,	NCCHTYPE_EXEFS = 2,	NCCHTYPE_ROMFS = 3,} ctr_ncchtypes;typedef struct{	u8 signature[0x100];	u8 magic[4];	u8 content_size[4];	u8 title_id[8];	u8 maker_code[2];	u8 version[2];	u8 reserved_0[4];	u8 program_id[8];	u8 temp_flag;	u8 reserved_1[0xF];	u8 logo_sha_256_hash[0x20];	u8 product_code[0x10];	u8 extended_header_sha_256_hash[0x20];	u8 extended_header_size[4];	u8 reserved_2[4];	u8 flags[8];	u8 plain_region_offset[4];	u8 plain_region_size[4];	u8 reserved_3[8];	u8 exefs_offset[4];	u8 exefs_size[4];	u8 exefs_hash_size[4];	u8 reserved_4[4];	u8 romfs_offset[4];	u8 romfs_size[4];	u8 romfs_hash_size[4];	u8 reserved_5[4];	u8 exefs_sha_256_hash[0x20];	u8 romfs_sha_256_hash[0x20];} __attribute__((__packed__)) NCCH_HEADER;typedef struct{	u8 DependList[0x60*0x8];	u8 CoreVersion;	u8 reserved[0xff];}META_STRUCT;typedef struct{	u8 encrypted;	u16 version;	u32 exheader_offset;	u32 exheader_size;	u32 exefs_offset;	u32 exefs_size;	u8 titleID[8];	u8 programID[8];}CXI_STRUCT;int GetCoreContentNCCH(CORE_CONTENT_INFO *core,FILE *ncch);NCCH_HEADER GetNCCHHeader(FILE *ncch);int CheckNCCHHeader(NCCH_HEADER *header);void read_ncch(FILE *ncch);int GetCXIStruct(CXI_STRUCT *ctx, FILE *ncch);int GetCXIMetaPreStruct(META_STRUCT *meta, CXI_STRUCT *cxi_ctx, CIA_CONTEXT *ctx, FILE *ncch);int GetCXIIcon(COMPONENT_STRUCT *cxi_icon, CXI_STRUCT *cxi_ctx, CIA_CONTEXT *ctx, FILE *ncch);void ncch_get_counter(CXI_STRUCT *ctx, u8 counter[16], u8 type);