/**Copyright 2013 3DSGuyThis file is part of make_cia.make_cia is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published bythe Free Software Foundation, either version 3 of the License, or(at your option) any later version.make_cia is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU General Public License for more details.You should have received a copy of the GNU General Public Licensealong with make_cia.  If not, see <http://www.gnu.org/licenses/>.**/#ifndef _NCCH_H_#define _NCCH_H_typedef enum{	ZerosFixed = 0,	SystemFixed = 1,	Secure = 2,	No_Key = 3,} cxi_key;typedef enum{	_unknown = 0,	CXI,	CFA_Manual,	CFA_DLPChild,	CFA_Update} ncch_types;typedef enum{	NCCHTYPE_EXHEADER = 1,	NCCHTYPE_EXEFS = 2,	NCCHTYPE_ROMFS = 3,} ctr_ncchtypes;typedef struct{	u8 magic[4];	u8 content_size[4];	u8 title_id[8];	u8 maker_code[2];	u8 version[2];	u8 reserved_0[4];	u8 program_id[8];	u8 temp_flag;	u8 reserved_1[0xF];	u8 logo_sha_256_hash[0x20];	u8 product_code[0x10];	u8 extended_header_sha_256_hash[0x20];	u8 extended_header_size[4];	u8 reserved_2[4];	u8 flags[8];	u8 plain_region_offset[4];	u8 plain_region_size[4];	u8 reserved_3[8];	u8 exefs_offset[4];	u8 exefs_size[4];	u8 exefs_hash_size[4];	u8 reserved_4[4];	u8 romfs_offset[4];	u8 romfs_size[4];	u8 romfs_hash_size[4];	u8 reserved_5[4];	u8 exefs_sha_256_hash[0x20];	u8 romfs_sha_256_hash[0x20];} __attribute__((__packed__)) NCCH_HEADER;typedef struct{	u8 DependList[0x60*0x8];	u8 CoreVersion[4];	u8 reserved[0xfc];}META_STRUCT;typedef struct{	u8 encrypted;	int is_cfa;	u16 version;	u32 exheader_offset;	u32 exheader_size;	u32 exefs_offset;	u32 exefs_size;	u32 romfs_offset;	u32 romfs_size;	u8 titleID[8];	u8 programID[8];}NCCH_STRUCT;#endifint GetCoreContentNCCH(USER_CONTEXT *ctx, CORE_CONTENT_INFO *core, u32 offset, FILE *ncch);NCCH_HEADER GetNCCHHeader(u32 offset, FILE *ncch);int CheckNCCHHeader(NCCH_HEADER *header);void read_ncch(u32 offset, FILE *ncch);int GetCXIStruct(NCCH_STRUCT *ctx, u32 offset, FILE *ncch);int GetCXIMetaPreStruct(META_STRUCT *meta, NCCH_STRUCT *cxi_ctx, USER_CONTEXT *ctx, u32 offset, FILE *ncch);int GetCXIIcon(COMPONENT_STRUCT *cxi_icon, NCCH_STRUCT *cxi_ctx, USER_CONTEXT *ctx, u32 offset, FILE *ncch);int VerifyNCCH(USER_CONTEXT *ctx, u32 offset, FILE *ncch);void ncch_get_counter(NCCH_STRUCT *ctx, u8 counter[16], u8 type);int GetFixedKeyType(u8 TitleID[8]);void CryptNCCHSection(u8 *buffer, NCCH_STRUCT *ctx, u8 key[16], u8 type);